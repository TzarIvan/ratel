package malbec.fix;

import static org.testng.Assert.assertTrue;
import malbec.fer.fix.AbstractFixTest;
import malbec.fix.FixClient;
import malbec.fix.FixClientTest.TestApplication;
import malbec.util.IWaitFor;

import org.testng.annotations.Test;

import quickfix.field.ClOrdID;
import quickfix.field.HandlInst;
import quickfix.field.OrdType;
import quickfix.field.OrderQty;
import quickfix.field.Price;
import quickfix.field.Side;
import quickfix.field.Symbol;
import quickfix.field.TimeInForce;
import quickfix.field.TransactTime;
import quickfix.fix44.NewOrderSingle;

public class SendFixTradeTest extends AbstractFixTest {

    @Test(groups = { "unittest" })
    public void testSendingEquityBuy() throws Exception {
        final FixClient fc = new FixClient("EquityOrders");
        TestApplication ta = new TestApplication();
        fc.setConfiguration(ta, createInitiatorSession());
        fc.start();

        waitForValue(new IWaitFor<Boolean>() {
            @Override
            public Boolean waitFor() {
                return fc.isLoggedOn();
            }
        }, true, MAX_LOGON_WAIT);

        assertTrue(fc.isLoggedOn(), "Session failed to logon");

        // The order ID will be generated by the database using the originating client
        NewOrderSingle nos = new NewOrderSingle(new ClOrdID("UnitTest" + System.nanoTime()), new Side(
                Side.BUY), new TransactTime(), new OrdType(OrdType.LIMIT));

        nos.set(new OrderQty(1));
        nos.set(new Symbol("ZVZZT"));
        nos.set(new HandlInst('1'));
        nos.setField(new TimeInForce(TimeInForce.DAY));

        if (nos.getOrdType().getValue() == OrdType.LIMIT) {
            nos.setField(new Price(12.50d));
        }

        System.out.println("Sending NOS");
        assertTrue(fc.sendOrder(nos), "Unable to send new order single");

        fc.stop();
/*        System.out.println("Waiting for logout");
        waitForValue(new IWaitFor<Boolean>() {
            @Override
            public Boolean waitFor() {
                return fc.isLoggedOn();
            }
        }, false, MAX_LOGON_WAIT);
*/
    }
}
