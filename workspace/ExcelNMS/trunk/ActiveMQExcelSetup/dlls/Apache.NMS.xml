<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apache.NMS</name>
    </assembly>
    <members>
        <member name="M:Apache.NMS.Util.NMSConvert.ToAcknowledgementMode(System.String)">
            <summary>
            Convert the acknowledgment mode string into AcknowledgementMode enum.
            </summary>
            <param name="ackText"></param>
            <returns>Equivalent enum value.  If unknown string is encounted, it will default to AutoAcknowledge.</returns>
        </member>
        <member name="M:Apache.NMS.Util.NMSConvert.ToXmlMessage(Apache.NMS.IMessageProducer,System.Object)">
            <summary>
            Convert an object into a text message.  The object must be serializable to XML.
            </summary>
        </member>
        <member name="M:Apache.NMS.Util.NMSConvert.ToXmlMessage(Apache.NMS.ISession,System.Object)">
            <summary>
            Convert an object into a text message.  The object must be serializable to XML.
            </summary>
        </member>
        <member name="M:Apache.NMS.Util.NMSConvert.FromXmlMessage(Apache.NMS.IMessage)">
            <summary>
            Convert a text message into an object.  The object must be serializable from XML.
            </summary>
        </member>
        <member name="M:Apache.NMS.Util.NMSConvert.GetRuntimeType(System.String)">
            <summary>
            Get the runtime type for the class name.  This routine will search all loaded
            assemblies in the current App Domain to find the type.
            </summary>
            <param name="typeName">Full name of the type.</param>
            <returns>Type object if found, or null if not found.</returns>
        </member>
        <member name="F:Apache.NMS.Util.DateUtils.windowsEpoch">
            <summary>
            The start of the Windows epoch
            </summary>
        </member>
        <member name="F:Apache.NMS.Util.DateUtils.javaEpoch">
            <summary>
            The start of the Java epoch
            </summary>
        </member>
        <member name="F:Apache.NMS.Util.DateUtils.epochDiff">
            <summary>
            The difference between the Windows epoch and the Java epoch
            in milliseconds.
            </summary>
        </member>
        <member name="T:Apache.NMS.Util.SessionUtil">
            <summary>
            Class to provide support for working with Session objects.
            </summary>
        </member>
        <member name="M:Apache.NMS.Util.SessionUtil.GetDestination(Apache.NMS.ISession,System.String)">
            <summary>
            Get the destination by parsing the embedded type prefix.  Default is Queue if no prefix is
            embedded in the destinationName.
            </summary>
            <param name="session">Session object to use to get the destination.</param>
            <param name="destinationName">Name of destination with embedded prefix.  The embedded prefix can be one of the following:
            	<list type="bullet">
            		<item>queue://</item>
            		<item>topic://</item>
            		<item>temp-queue://</item>
            		<item>temp-topic://</item>
            	</list>
            </param>
            <returns></returns>
        </member>
        <member name="M:Apache.NMS.Util.SessionUtil.GetDestination(Apache.NMS.ISession,System.String,Apache.NMS.DestinationType)">
            <summary>
            Get the destination by parsing the embedded type prefix.
            </summary>
            <param name="session">Session object to use to get the destination.</param>
            <param name="destinationName">Name of destination with embedded prefix.  The embedded prefix can be one of the following:
            	<list type="bullet">
            		<item>queue://</item>
            		<item>topic://</item>
            		<item>temp-queue://</item>
            		<item>temp-topic://</item>
            	</list>
            </param>
            <param name="defaultType">Default type if no embedded prefix is specified.</param>
            <returns></returns>
        </member>
        <member name="M:Apache.NMS.Util.SessionUtil.DeleteDestination(Apache.NMS.ISession,System.String)">
            <summary>
            Delete the named destination by parsing the embedded type prefix.  Default is Queue if no prefix is
            embedded in the destinationName.
            </summary>
            <param name="session">Session object to use to get the destination.</param>
            <param name="destinationName">Name of destination with embedded prefix.  The embedded prefix can be one of the following:
            	<list type="bullet">
            		<item>queue://</item>
            		<item>topic://</item>
            		<item>temp-queue://</item>
            		<item>temp-topic://</item>
            	</list>
            </param>
            <returns></returns>
        </member>
        <member name="M:Apache.NMS.Util.SessionUtil.DeleteDestination(Apache.NMS.ISession,System.String,Apache.NMS.DestinationType)">
            <summary>
            Delete the named destination by parsing the embedded type prefix.
            </summary>
            <param name="session">Session object to use to get the destination.</param>
            <param name="destinationName">Name of destination with embedded prefix.  The embedded prefix can be one of the following:
            	<list type="bullet">
            		<item>queue://</item>
            		<item>topic://</item>
            		<item>temp-queue://</item>
            		<item>temp-topic://</item>
            	</list>
            </param>
            <param name="defaultType">Default type if no embedded prefix is specified.</param>
            <returns></returns>
        </member>
        <member name="T:Apache.NMS.Util.URISupport">
            <summary>
            Class to provide support for Uri query parameters which uses .Net reflection
            to identify and set properties.
            </summary>
        </member>
        <member name="M:Apache.NMS.Util.URISupport.ParseQuery(System.String)">
            <summary>
            Parse a Uri query string of the form ?x=y&amp;z=0
            into a map of name/value pairs.
            </summary>
            <param name="query">The query string to parse. This string should not contain
            Uri escape characters.</param>
        </member>
        <member name="M:Apache.NMS.Util.URISupport.SetProperties(System.Object,System.Collections.Specialized.StringDictionary,System.String)">
            <summary>
            Sets the public properties of a target object using a string map.
            This method uses .Net reflection to identify public properties of
            the target object matching the keys from the passed map.
            </summary>
            <param name="target">The object whose properties will be set.</param>
            <param name="map">Map of key/value pairs.</param>
            <param name="prefix">Key value prefix.  This is prepended to the property name
            before searching for a matching key value.</param>
        </member>
        <member name="M:Apache.NMS.Util.URISupport.parseComposite(System.Uri,Apache.NMS.Util.URISupport.CompositeData,System.String)">
            <summary>
            </summary>
            <param name="uri"></param>
            <param name="rc"></param>
            <param name="ssp"></param>
        </member>
        <member name="M:Apache.NMS.Util.URISupport.splitComponents(System.String)">
            <summary>
            </summary>
            <param name="componentString"></param>
        </member>
        <member name="T:Apache.NMS.Util.XmlUtil">
            <summary>
            Class to provide support for working with Xml objects.
            </summary>
        </member>
        <member name="T:Apache.NMS.IBytesMessage">
            <summary>
            Represents a binary based message
            </summary>
        </member>
        <member name="T:Apache.NMS.IMessage">
            <summary>
            Represents a message either to be sent to a message broker or received from a message broker.
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessage.Acknowledge">
            <summary>
            If using client acknowledgement mode on the session, then this method will acknowledge that the
            message has been processed correctly.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.Properties">
            <summary>
            Provides access to the message properties (headers).
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSCorrelationID">
            <summary>
            The correlation ID used to correlate messages from conversations or long running business processes.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSDestination">
            <summary>
            The destination of the message.  This property is set by the IMessageProducer.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSTimeToLive">
            <summary>
            The amount of time for which this message is valid.  Zero if this message does not expire.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSMessageId">
            <summary>
            The message ID which is set by the provider.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSDeliveryMode">
            <summary>
            Whether or not this message is persistent.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSPriority">
            <summary>
            The Priority of this message.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSRedelivered">
            <summary>
            Returns true if this message has been redelivered to this or another consumer before being acknowledged successfully.
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSReplyTo">
            <summary>
            The destination that the consumer of this message should send replies to
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSTimestamp">
            <summary>
            The timestamp of when the message was pubished in UTC time.  If the publisher disables setting 
            the timestamp on the message, the time will be set to the start of the UNIX epoc (1970-01-01 00:00:00).
            </summary>
        </member>
        <member name="P:Apache.NMS.IMessage.NMSType">
            <summary>
            The type name of this message.
            </summary>
        </member>
        <member name="T:Apache.NMS.AcknowledgementMode">
            <summary>
            The mode used to acknowledge messages after they are consumed
            </summary>
        </member>
        <member name="F:Apache.NMS.AcknowledgementMode.AutoAcknowledge">
            <summary>
            With this acknowledgment mode, the session will not
            acknowledge receipt of a message since the broker assumes
            successful receipt of a message after the onMessage handler
            has returned without error.
            </summary>
        </member>
        <member name="F:Apache.NMS.AcknowledgementMode.DupsOkAcknowledge">
            <summary>
            With this acknowledgment mode, the session automatically
            acknowledges a client's receipt of a message either when
            the session has successfully returned from a call to receive
            or when the message listener the session has called to
            process the message successfully returns.  Acknowlegements
            may be delayed in this mode to increase performance at
            the cost of the message being redelivered this client fails.
            </summary>
        </member>
        <member name="F:Apache.NMS.AcknowledgementMode.ClientAcknowledge">
            <summary>
            With this acknowledgment mode, the client acknowledges a
            consumed message by calling the message's acknowledge method.
            </summary>
        </member>
        <member name="F:Apache.NMS.AcknowledgementMode.Transactional">
            <summary>
            Messages will be consumed when the transaction commits.
            </summary>
        </member>
        <member name="T:Apache.NMS.ExceptionListener">
            <summary>
            A delegate that can receive transport level exceptions.
            </summary>
        </member>
        <member name="T:Apache.NMS.IConnection">
            <summary>
            Represents a connection with a message broker
            </summary>
        </member>
        <member name="T:Apache.NMS.IStartable">
            <summary>
            A lifecycle for NMS objects to indicate they can be started
            </summary>
        </member>
        <member name="T:Apache.NMS.IStoppable">
            <summary>
            A lifecycle for NMS objects to indicate they can be stopped
            </summary>
        </member>
        <member name="M:Apache.NMS.IConnection.CreateSession">
            <summary>
            Creates a new session to work on this connection
            </summary>
        </member>
        <member name="M:Apache.NMS.IConnection.CreateSession(Apache.NMS.AcknowledgementMode)">
            <summary>
            Creates a new session to work on this connection
            </summary>
        </member>
        <member name="M:Apache.NMS.IConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="E:Apache.NMS.IConnection.ExceptionListener">
            <summary>
            An asynchronous listener which can be notified if an error occurs
            </summary>
        </member>
        <member name="P:Apache.NMS.IConnection.RequestTimeout">
            <summary>
            The default timeout for network requests.
            </summary>
        </member>
        <member name="P:Apache.NMS.IConnection.AcknowledgementMode">
            <summary>
            The default acknowledgement mode
            </summary>
        </member>
        <member name="P:Apache.NMS.IConnection.ClientId">
            <summary>
            Sets the unique clienet ID for this connection before Start() or returns the
            unique client ID after the connection has started
            </summary>
        </member>
        <member name="T:Apache.NMS.IConnectionFactory">
            <summary>
            A Factory of IConnection objects
            </summary>
        </member>
        <member name="M:Apache.NMS.IConnectionFactory.CreateConnection">
            <summary>
            Creates a new connection
            </summary>
        </member>
        <member name="M:Apache.NMS.IConnectionFactory.CreateConnection(System.String,System.String)">
            <summary>
            Creates a new connection with the given user name and password
            </summary>
        </member>
        <member name="T:Apache.NMS.DestinationType">
            <summary>
            Represents the type of the destination such as a queue or topic.
            </summary>
        </member>
        <member name="T:Apache.NMS.IDestination">
            <summary>
            A base interface for destinations such as queues or topics
            </summary>
        </member>
        <member name="T:Apache.NMS.NMSException">
            <summary>
            Represents a NMS exception
            </summary>
        </member>
        <member name="P:Apache.NMS.NMSException.ErrorCode">
            <summary>
            Returns the error code for the exception, if one has been provided.
            </summary>
        </member>
        <member name="T:Apache.NMS.IMapMessage">
            <summary>
            Represents a Map message which contains key and value pairs which are
            of primitive types
            </summary>
        </member>
        <member name="T:Apache.NMS.MessageListener">
            <summary>
            A delegate that can receive messages async.
            </summary>
        </member>
        <member name="T:Apache.NMS.IMessageConsumer">
            <summary>
            A consumer of messages
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageConsumer.Receive">
            <summary>
            Waits until a message is available and returns it
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageConsumer.Receive(System.TimeSpan)">
            <summary>
            If a message is available within the timeout duration it is returned otherwise this method returns null
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageConsumer.ReceiveNoWait">
            <summary>
            If a message is available immediately it is returned otherwise this method returns null
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageConsumer.Close">
            <summary>
            Closes the message consumer. 
            </summary>
            <remarks>
            Clients should close message consumers them when they are not needed.
            This call blocks until a receive or message listener in progress has completed.
            A blocked message consumer receive call returns null when this message consumer is closed.
            </remarks>
        </member>
        <member name="E:Apache.NMS.IMessageConsumer.Listener">
            <summary>
            An asynchronous listener which can be used to consume messages asynchronously
            </summary>
        </member>
        <member name="T:Apache.NMS.IMessageProducer">
            <summary>
            An object capable of sending messages to some destination
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.Send(Apache.NMS.IMessage)">
            <summary>
            Sends the message to the default destination for this producer
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.Send(Apache.NMS.IMessage,Apache.NMS.MsgDeliveryMode,Apache.NMS.MsgPriority,System.TimeSpan)">
            <summary>
            Sends the message to the default destination with the explicit QoS configuration
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.Send(Apache.NMS.IDestination,Apache.NMS.IMessage)">
            <summary>
            Sends the message to the given destination
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.Send(Apache.NMS.IDestination,Apache.NMS.IMessage,Apache.NMS.MsgDeliveryMode,Apache.NMS.MsgPriority,System.TimeSpan)">
            <summary>
            Sends the message to the given destination with the explicit QoS configuration
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.Close">
            <summary>
            Close the producer.
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.CreateMessage">
            <summary>
            Creates a new message with an empty body
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.CreateTextMessage">
            <summary>
            Creates a new text message with an empty body
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.CreateTextMessage(System.String)">
            <summary>
            Creates a new text message with the given body
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.CreateMapMessage">
            <summary>
            Creates a new Map message which contains primitive key and value pairs
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.CreateObjectMessage(System.Object)">
            <summary>
            Creates a new Object message containing the given .NET object as the body
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.CreateBytesMessage">
            <summary>
            Creates a new binary message
            </summary>
        </member>
        <member name="M:Apache.NMS.IMessageProducer.CreateBytesMessage(System.Byte[])">
            <summary>
            Creates a new binary message with the given body
            </summary>
        </member>
        <member name="T:Apache.NMS.InvalidDestinationException">
            <summary>
            An attempt is made to access an invalid destination
            </summary>
        </member>
        <member name="T:Apache.NMS.IObjectMessage">
            <summary>
            Represents an Object message which contains a serializable .Net object.
            </summary>
        </member>
        <member name="T:Apache.NMS.IPrimitiveMap">
            <summary>
            Represents a Map of primitive types where the keys are all string instances
            and the values are strings or numbers.
            </summary>
        </member>
        <member name="T:Apache.NMS.IQueue">
            <summary>
            Represents a queue in a message broker. A message sent to a queue is delivered
            to at most one consumer on the queue.
            </summary>
        </member>
        <member name="T:Apache.NMS.ISession">
            <summary>
            Represents a single unit of work on an IConnection.
            So the ISession can be used to perform transactional receive and sends
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateProducer">
            <summary>
            Creates a producer of messages
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateProducer(Apache.NMS.IDestination)">
            <summary>
            Creates a producer of messages on a given destination
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateConsumer(Apache.NMS.IDestination)">
            <summary>
            Creates a consumer of messages on a given destination
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateConsumer(Apache.NMS.IDestination,System.String)">
            <summary>
            Creates a consumer of messages on a given destination with a selector
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateConsumer(Apache.NMS.IDestination,System.String,System.Boolean)">
            <summary>
            Creates a consumer of messages on a given destination with a selector
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateDurableConsumer(Apache.NMS.ITopic,System.String,System.String,System.Boolean)">
            <summary>
            Creates a named durable consumer of messages on a given destination with a selector
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.DeleteDurableConsumer(System.String)">
            <summary>
            Deletes a durable consumer created with CreateDurableConsumer().
            </summary>
            <param name="name">Name of the durable consumer</param>
        </member>
        <member name="M:Apache.NMS.ISession.GetQueue(System.String)">
            <summary>
            Returns the queue for the given name
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.GetTopic(System.String)">
            <summary>
            Returns the topic for the given name
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateTemporaryQueue">
            <summary>
            Creates a temporary queue
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateTemporaryTopic">
            <summary>
            Creates a temporary topic
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.DeleteDestination(Apache.NMS.IDestination)">
            <summary>
            Delete a destination (Queue, Topic, Temp Queue, Temp Topic).
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateMessage">
            <summary>
            Creates a new message with an empty body
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateTextMessage">
            <summary>
            Creates a new text message with an empty body
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateTextMessage(System.String)">
            <summary>
            Creates a new text message with the given body
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateMapMessage">
            <summary>
            Creates a new Map message which contains primitive key and value pairs
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateObjectMessage(System.Object)">
            <summary>
            Creates a new Object message containing the given .NET object as the body
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateBytesMessage">
            <summary>
            Creates a new binary message
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.CreateBytesMessage(System.Byte[])">
            <summary>
            Creates a new binary message with the given body
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.Close">
            <summary>
            Closes the session.  There is no need to close the producers and consumers
            of a closed session.
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.Commit">
            <summary>
            If this is a transactional session then commit all message
            send and acknowledgements for producers and consumers in this session
            </summary>
        </member>
        <member name="M:Apache.NMS.ISession.Rollback">
            <summary>
            If this is a transactional session then rollback all message
            send and acknowledgements for producers and consumers in this session
            </summary>
        </member>
        <member name="T:Apache.NMS.ITemporaryQueue">
            <summary>
            Represents a temporary queue which exists for the duration 
            of the IConnection which created it.
            </summary>
        </member>
        <member name="T:Apache.NMS.ITemporaryTopic">
            <summary>
            Represents a temporary topic which exists for the duration 
            of the IConnection which created it.
            </summary>
        </member>
        <member name="T:Apache.NMS.ITextMessage">
            <summary>
            Represents a text based message
            </summary>
        </member>
        <member name="T:Apache.NMS.ITopic">
            <summary>
            Represents a topic in a message broker. A message sent to a topic
            is delivered to all consumers on the topic who are interested in the message.
            </summary>
        </member>
        <member name="T:Apache.NMS.ITrace">
            <summary>
            The ITrace interface is used internally by ActiveMQ to log messages.
            The client aplication may provide an implementation of ITrace if it wishes to
            route messages to a specific destination.
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:Apache.NMS.Tracer"/> class to register an instance of ITrace as the
            active trace destination.
            </para>
            </remarks>
        </member>
        <member name="T:Apache.NMS.NMSConnectionException">
            <summary>
            Represents a connection failure.
            </summary>
        </member>
        <member name="T:Apache.NMS.NMSConnectionFactory">
            <summary>
            Implementation of a factory for <see cref="T:Apache.NMS.IConnection"/> instances.
            </summary>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.#ctor(System.String,System.Object[])">
            <summary>
            The ConnectionFactory object must define a constructor that takes as a minimum a Uri object.
            Any additional parameters are optional, but will typically include a Client ID string.
            </summary>
            <param name="providerURI">The URI for the ActiveMQ provider.</param>
            <param name="constructorParams">Optional parameters to use when creating the ConnectionFactory.</param>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.#ctor(System.Uri,System.Object[])">
            <summary>
            The ConnectionFactory object must define a constructor that takes as a minimum a Uri object.
            Any additional parameters are optional, but will typically include a Client ID string.
            </summary>
            <param name="uriProvider">The URI for the ActiveMQ provider.</param>
            <param name="constructorParams">Optional parameters to use when creating the ConnectionFactory.</param>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.CreateConnectionFactory(System.Uri,System.Object[])">
            <summary>
            Create a connection factory that can create connections for the given scheme in the URI.
            </summary>
            <param name="uriProvider">The URI for the ActiveMQ provider.</param>
            <param name="constructorParams">Optional parameters to use when creating the ConnectionFactory.</param>
            <returns>A <see cref="T:Apache.NMS.IConnectionFactory"/> implementation that will be used.</returns>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.GetTypeForScheme(System.String)">
            <summary>
            Finds the <see cref="T:System.Type"/> associated with the given scheme.
            </summary>
            <param name="scheme">The scheme (e.g. <c>tcp</c>, <c>activemq</c> or <c>stomp</c>).</param>
            <returns>The <see cref="T:System.Type"/> of the ConnectionFactory that will be used
            to create the connection for the specified <paramref name="scheme"/>.</returns>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.LookupConnectionFactoryInfo(System.String[],System.String,System.String@,System.String@)">
             <summary>
             Lookup the connection factory assembly filename and class name.
             Read an external configuration file that maps scheme to provider implementation.
             Load XML config files named: nmsprovider-{scheme}.config
             Following is a sample configuration file named nmsprovider-jms.config.  Replace
             the parenthesis with angle brackets for proper XML formatting.
            
                 (?xml version="1.0" encoding="utf-8" ?)
                 (configuration)
                     (provider assembly="MyCompany.NMS.JMSProvider.dll" classFactory="MyCompany.NMS.JMSProvider.ConnectionFactory"/)
                 (/configuration)
            
             This configuration file would be loaded and parsed when a connection uri with a scheme of 'jms'
             is used for the provider.  In this example the connection string might look like:
                 jms://localhost:7222
            
             </summary>
             <param name="paths">Folder paths to look in.</param>
             <param name="scheme">The scheme.</param>
             <param name="assemblyFileName">Name of the assembly file.</param>
             <param name="factoryClassName">Name of the factory class.</param>
             <returns><c>true</c> if the configuration file for the specified <paramref name="scheme" /> could
             be found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.GetConfigSearchPaths">
            <summary>
            Get an array of search paths to look for config files.
            </summary>
            <returns>
            A collection of search paths, including the current directory, the current AppDomain's
            BaseDirectory and the current AppDomain's RelativeSearchPath.
            </returns>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.MakeParameterArray(System.Object,System.Object[])">
            <summary>
            Converts a <c>params object[]</c> collection into a plain <c>object[]</c>s, to pass to the constructor.
            </summary>
            <param name="firstParam">The first parameter in the collection.</param>
            <param name="varParams">The remaining parameters.</param>
            <returns>An array of <see cref="T:System.Object"/> instances.</returns>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.CreateConnection">
            <summary>
            Creates a new connection.
            </summary>
            <returns>An <see cref="T:Apache.NMS.IConnection"/> created by the requested ConnectionFactory.</returns>
        </member>
        <member name="M:Apache.NMS.NMSConnectionFactory.CreateConnection(System.String,System.String)">
            <summary>
            Creates a new connection with the given <paramref name="userName"/> and <paramref name="password"/> credentials.
            </summary>
            <param name="userName">The username to use when establishing the connection.</param>
            <param name="password">The password to use when establishing the connection.</param>
            <returns>An <see cref="T:Apache.NMS.IConnection"/> created by the requested ConnectionFactory.</returns>
        </member>
        <member name="P:Apache.NMS.NMSConnectionFactory.ConnectionFactory">
            <summary>
            The actual IConnectionFactory implementation that is being used.  This implementation
            depends on the scheme of the URI used when constructed.
            </summary>
        </member>
        <member name="T:Apache.NMS.MsgPriority">
            <summary>
            Define an enumerated array of message priorities.
            </summary>
        </member>
        <member name="T:Apache.NMS.MsgDeliveryMode">
            <summary>
            Define an enumerated array of message delivery modes.  Provider-specific
            values can be used to extend this enumerated mode.  TIBCO is known to
            provide a third value of ReliableDelivery.  At minimum, a provider must
            support Persistent and NonPersistent.
            </summary>
        </member>
        <member name="T:Apache.NMS.NMSConstants">
            <summary>
            Defines a number of constants
            </summary>
        </member>
        <member name="T:Apache.NMS.NMSSecurityException">
            <summary>
            Represents a security failure.
            </summary>
        </member>
    </members>
</doc>
