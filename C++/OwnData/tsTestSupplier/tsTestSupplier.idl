// tsTestSupplier.idl : IDL source for tsTestSupplier.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (tsTestSupplier.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

#define CLSID_ITS_SUPPLIER_OD 0F228678-C8E4-42b6-98E1-9C2C641F9FA1
#define CLSID_ITS_ADDINGSYMBOL "D102088D-7CBC-42b5-93C8-2476D54DE8BD"
#define TYPELIB_TEST_SUPPLIER D5783996-0620-49b7-8EB4-B3CD3B2E4DD5
#define UUID_TEST_SUPPLIER 1BD005FD-6FB8-41d1-BD29-72CBEBFE33B2
	
	[
		object,
		uuid(CLSID_ITS_SUPPLIER_OD),
		dual,
		helpstring("ItsSupplier Interface"),
		pointer_default(unique)
	]

	interface ItsSupplier : IDispatch
	{
		[propget, id(1), helpstring("property Name")] HRESULT Name([out, retval] BSTR* pVal);
		[propget, id(2), helpstring("property ShortName")] HRESULT ShortName([out, retval] BSTR* pVal);
		[propget, id(3), helpstring("property Description")] HRESULT Description([out, retval] BSTR* pVal);
		[propget, id(4), helpstring("property Version")] HRESULT Version([out, retval] BSTR* pVal);
		[propget, id(5), helpstring("property Vendor")] HRESULT Vendor([out, retval] BSTR* pVal);
		[id(6), helpstring("method ShowProperties")] HRESULT ShowProperties(long Datafeed);

		[propget, id(7), helpstring("property ConnectionsNumber")] HRESULT ConnectionsNumber([out, retval] long* pVal);
		[propget, id(8), helpstring("property ConnectionName")] HRESULT ConnectionName([in] long Index, [out, retval] BSTR* pVal);

		[id(9), helpstring("method AdviseConnectionsStatus")] HRESULT AdviseConnectionsStatus(long Datafeed, IUnknown* pSink);
		[id(10), helpstring("method UnadviseConnectionsStatus")] HRESULT UnadviseConnectionsStatus(long Datafeed, IUnknown* pSink);

		[id(11), helpstring("method IsProvide")] HRESULT IsProvide(long Mode, long Symbol, long Category, long ResolutionSize, long Resolution, long Field, [out] BOOL* pVal);

		[id(12), helpstring("method Advise")] HRESULT Advise(IUnknown* pSink);
		[id(13), helpstring("method Unadvise")] HRESULT Unadvise();

		[id(14), helpstring("method AdviseTransaction")] HRESULT AdviseTransaction(long Id, long Datafeed, long Symbol, BSTR SymbolName, BSTR Description, long Category, long ResolutionSize, long Resolution, long Field, long Exchange, BSTR ExchangeName, long StartDate, long StartTime, long FinishDate, long FinishTime, BSTR Sessions, BSTR SessionsTimeZoneInformation, BSTR ExchangeTimeZoneInformation);
		[id(15), helpstring("method UnadviseTransaction")] HRESULT UnadviseTransaction(long Id);

		[id(16), helpstring("method GetResolutions")] HRESULT GetResolutions(long Mode, long DataFeed, long Symbol, BSTR SymbolName, BSTR Description, long Category, long Exchange, BSTR ExchangeName, [out] VARIANT* Answer);
		[id(17), helpstring("method GetResolutionSizes")] HRESULT GetResolutionSizes(long Mode, long DataFeed, long Symbol, BSTR SymbolName, BSTR Description, long Category, long Resolution, long Exchange, BSTR ExchangeName, [out] VARIANT* Answer);
		[id(18), helpstring("method GetFields")] HRESULT GetFields(long Mode, long DataFeed, long Symbol, BSTR SymbolName, BSTR Description, long Category, long ResolutionSize, long Resolution, long Exchange, BSTR ExchangeName, [out] VARIANT* Answer);

		[propget, id(19), helpstring("property ProvideStatusLine")] HRESULT ProvideStatusLine([out, retval] long* pVal);
		[id(20), helpstring("method AdviseStatusLine")] HRESULT AdviseStatusLine(long Id, long Datafeed, long Symbol, BSTR SymbolName, BSTR Description, long Category, long ResolutionSize, long Resolution, long Field, long Exchange, BSTR ExchangeName, BSTR Sessions, BSTR SessionsTimeZoneInformation);
		[id(21), helpstring("method UnadviseStatusLine")] HRESULT UnadviseStatusLine(long Id);

		[id(22), helpstring("method IsProvideAddingSymbols")] HRESULT IsProvideAddingSymbols([out] BOOL* pVal);
		[id(23), helpstring("method DoAddingSymbols")] HRESULT DoAddingSymbols(long Datafeed, IDispatch* Portfolio);

		[id(24), helpstring("method CanSaveToStorage")] HRESULT CanSaveToStorage([out] BOOL* pVal);
		[id(25), helpstring("method CanReadFromStorage")] HRESULT CanReadFromStorage([out] BOOL* pVal);
		[propget, id(26), helpstring("property IsAscDataFeed")] HRESULT IsAscDataFeed([out, retval] BOOL* pVal);
	};	

	// IqmAddingSymbol
	[
			object,
			uuid(CLSID_ITS_ADDINGSYMBOL),
			dual, helpstring("IqmAddingSymbol Interface"),
			pointer_default(unique)
	]
	interface IqmAddingSymbol : IDispatch
	{
	  [id(1), helpstring("method AddSymbol")] HRESULT AddSymbol(BSTR SymbolName, BSTR SymbolRoot, BSTR Description, BSTR CUSIP, long Category, long DataFeed, BSTR ExchangeName, long ContractMonth, long ContractYear, double StrikePrice, long CallPut, long Margin, long ExpirationDate, long Expired, long ExpirationRule, long FirstNoticeDate, long Delivery, long* pVal);
	};


[
	uuid(TYPELIB_TEST_SUPPLIER),
	version(1.0),
	helpstring("tsTestSupplier 1.0 Type Library")
]
library TSTESTSUPPLIERLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	
	[
		uuid(UUID_TEST_SUPPLIER),
		helpstring("TestSupplier Class")
	]
	coclass TestSupplier
	{
		[default] interface ItsSupplier;
	};
};
